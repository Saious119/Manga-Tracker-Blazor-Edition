@page "/"

<PageTitle>Manga Tracker</PageTitle>

@using MangaTracker_Temp.Services
@using MangaTracker_Temp.ViewModel
@using MangaTracker_Temp.Model
@using MongoDB;
@using MongoDB.Bson.Serialization;
@using Newtonsoft.Json.Bson;
@using Newtonsoft.Json;
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization  

@inject AuthenticationStateProvider AuthenticationStateProvider  
@inject NavigationManager uriHelper;
@inject MangaService MS;

<h1>Manga Tracker</h1>

<p>If your data doesn't load immediately, please wait a few minutes</p>
<button @onclick="AddManga" class="btn btn-primary">Add Manga</button>
@if(IsFormVisible)
{
    <EditForm Model="@M" OnValidSubmit="@HandleSubmit">
        <InputText id="Name" @bind-Value="M.Name" class="form-control form-control-sm"/>
        <InputText id="Author" @bind-Value="M.Author" class="form-control form-control-sm"/>
        <InputText id="numRead" @bind-Value="M.numRead" class="form-control form-control-sm"/>
        <InputText id="numVolumes" @bind-Value="M.numVolumes" class="form-control form-control-sm"/>
        <input type="submit" class="btn btn-primary" value="Save"/>
    </EditForm>
}

@if (manga == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
           <tr> 
                <th>Name</th>
                <th>Author</th>
                <th>Volumes Read</th>
                <th>Number of Total Volumes</th>
                <th>Completion %</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var m in manga)
            {
                <tr>
                    <td>@m[1]</td>
                    <td>@m[2]</td>
                    <td>@m[4]</td>
                    <td>@m[3]</td>
                    <td>@MS.CalcCompletion(m[4].ToInt32(), m[3].ToInt32())</td>
                    <td><button @onclick="() => RemoveManga(m[1].ToString())" class="btn btn-primary">Delete</button></td>
                    <td><button @onclick="UpdateManga" class="btn btn-primary">Edit</button>
                    @if (isUpdateFormVisible)
                    {
                        <br>
                        <EditForm Model="@M" OnValidSubmit="@HandleUpdate">
                            <InputText placeholder="@m[1]" id="Name" @bind-Value="M.Name" class="form-control form-control-sm"/>
                            <InputText placeholder="@m[2]" id="Author" @bind-Value="M.Author" class="form-control form-control-sm"/>
                            <InputText placeholder="@m[4]" id="numRead" @bind-Value="M.numRead" class="form-control form-control-sm"/>
                            <InputText placeholder="@m[3]" id="numVolumes" @bind-Value="M.numVolumes" class="form-control form-control-sm"/>
                            <input type="submit" class="btn btn-primary" value="Update"/>
                        </EditForm>
                    }
                    </td>
                </tr>
            }
        </tbody>
        <p><strong>Total Percentage Read: @MS.AvgCalc() %</strong></p>
    </table>
}

@code {
    //private readonly IHttpContextAccessor _httpContextAccessor;
    private Manga M { get; set; } = new Manga();
    private Manga m { get; set; } = new Manga();
    private MongoDB.Bson.BsonDocument[]? manga;
    private List<MongoDB.Bson.BsonDocument> mangaList;
    private string user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();  
        user = authState.User.Identity.Name;
        Console.WriteLine("http struf: {0} done", user);
        mangaList = await MS.GetMangaAsync(user);
        manga = mangaList.ToArray();
        base.OnInitialized();
        var timer = new System.Threading.Timer((_) =>
        {
            InvokeAsync(async () =>
            {
                StateHasChanged();
            });
        }, null, 0, 1000);
    }
    bool IsFormVisible = false;
    private void AddManga()
    {
        IsFormVisible = true;
        StateHasChanged();
        //cry more
    }
    private void HandleSubmit()
    {
        Console.WriteLine("adding to DB");
        Console.WriteLine("{0}, {1}, {2}, {3}", M.Name, M.Author, M.numRead, M.numVolumes);
        MS.AddMangaToDB(M, user);
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
        AvgCalc();
        StateHasChanged();
    }
    private async void RemoveManga(string name){
        Console.WriteLine("Deleting: {0}", name);
        await MS.RemoveManga(name, user);
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
        AvgCalc();
        StateHasChanged();
    }
    bool isUpdateFormVisible = false;
    private async void UpdateManga()
    {
        isUpdateFormVisible = true;
        StateHasChanged();
    }
    private void HandleUpdate()
    {
        MS.UpdateManga(M, user);
        Console.WriteLine("Finished updating {0}", M.Name);
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
        AvgCalc();
        StateHasChanged();
    }
    private string AvgCalc() => MS.AvgCalc();
}
