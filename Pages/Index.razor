@page "/"
@inject IHttpContextAccessor HttpContextAccessor
<PageTitle>Manga Tracker</PageTitle>

@using MangaTracker_Temp.Services
@using MangaTracker_Temp.ViewModel
@using MangaTracker_Temp.Model
@using MongoDB;
@using MongoDB.Bson
@using MongoDB.Bson.Serialization;
@using Newtonsoft.Json.Bson;
@using Newtonsoft.Json;
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization  
@using ElectronNET.API;
@using System.Text;

@inject AuthenticationStateProvider AuthenticationStateProvider  
@inject NavigationManager uriHelper;
@inject MangaService MS;

<h1>Manga Tracker</h1>

<p>If your data doesn't load immediately, please wait a few minutes</p>
<button @onclick="AddManga" class="btn btn-primary">Add Manga</button>
@if(IsFormVisible)
{
    <EditForm Model="@M" OnValidSubmit="@HandleSubmit">
        <InputText id="Name" @bind-Value="M.Name" class="form-control form-control-sm"/>
        <InputText id="Author" @bind-Value="M.Author" class="form-control form-control-sm"/>
        <InputText id="numRead" @bind-Value="M.numRead" class="form-control form-control-sm"/>
        <InputText id="numVolumes" @bind-Value="M.numVolumes" class="form-control form-control-sm"/>
        <input type="submit" class="btn btn-primary" value="Save"/>
    </EditForm>
}

@if (manga == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
           <tr> 
                <th><button @onclick="SortByName" class="btn btn-primary">Name</button></th>
                <th><button @onclick="SortByAuthor" class="btn btn-primary">Author</button></th>
                <th><button @onclick="SortByNumRead" class="btn btn-primary">Volumes Read</button></th>
                <th><button @onclick="SortByNumVolumes" class="btn btn-primary">Number of Total Volumes</button></th>
                <th>Completion %</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var m in mangaL)
            {
                <tr>
                    <td>@m.Name</td>
                    <td>@m.Author</td>
                    <td>@m.numRead</td>
                    <td>@m.numVolumes</td>
                    <td>@MS.CalcCompletion(Int32.Parse(m.numRead), Int32.Parse(m.numVolumes))</td>
                    <td><button @onclick="() => RemoveManga(m.Name.ToString())" class="btn btn-primary">Delete</button></td>
                    <td><button @onclick="() => UpdateManga(m)" class="btn btn-primary">Edit</button>
                    @if (m.isUpdateFormVisible)
                    {
                        <br>
                        <EditForm Model="@M" OnValidSubmit="@HandleUpdate">
                            <InputText placeholder="@m.Name" id="Name" @bind-Value="M.Name" class="form-control form-control-sm"/>
                            <InputText placeholder="@m.Author" id="Author" @bind-Value="M.Author" class="form-control form-control-sm"/>
                            <InputText placeholder="@m.numRead" id="numRead" @bind-Value="M.numRead" class="form-control form-control-sm"/>
                            <InputText placeholder="@m.numVolumes" id="numVolumes" @bind-Value="M.numVolumes" class="form-control form-control-sm"/>
                            <input type="submit" class="btn btn-primary" value="Update"/>
                        </EditForm>
                    }
                    </td>
                </tr>
            }
        </tbody>
        <p><button @onclick="() => RefreshAvgCalc()" class="btn btn-primary">Refresh</button><strong>Total Percentage Read: @MS.AvgCalc() %</strong></p>
    </table>
}

@code {
    //private readonly IHttpContextAccessor _httpContextAccessor;
    private Manga M { get; set; } = new Manga();
    private Manga m { get; set; } = new Manga();
    private Manga[]? manga;
    private List<Manga> mangaL;
    private List<Manga> mangaList;
    private string user;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();  
        user = authState.User.Identity.Name;
        var session = HttpContextAccessor.HttpContext.Session;
        if (session.TryGetValue("DiscordUserId", out byte[] sessionData)) //try to get Discord user if loged in
        {
            user = Encoding.UTF8.GetString(sessionData);
        }
        Console.WriteLine("Logging in user: {0} done", user);
        mangaList = await MS.GetMangaAsync(user);
        manga = mangaList.ToArray();
        mangaL = manga.ToList();
        base.OnInitialized();
        var timer = new System.Threading.Timer((_) =>
        {
            InvokeAsync(async () =>
            {
                StateHasChanged();
            });
        }, null, 0, 1000);
    }
    bool IsFormVisible = false;
    private void AddManga()
    {
        IsFormVisible = true;
        StateHasChanged();
        //cry more
    }
    private void HandleSubmit()
    {
        Console.WriteLine("Adding to DB");
        Console.WriteLine("{0}, {1}, {2}, {3}", M.Name, M.Author, M.numRead, M.numVolumes);
        MS.AddMangaToDB(M, user);
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
        AvgCalc();
        StateHasChanged();
    }
    private async void RemoveManga(string name){
        Console.WriteLine("Deleting: {0}", name);
        await MS.RemoveManga(name, user);
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
        AvgCalc();
        StateHasChanged();
    }
    bool isUpdateFormVisible = false;
    private async void UpdateManga(Manga m)
    {
        m.isUpdateFormVisible = true;
        StateHasChanged();
    }
    private void HandleUpdate()
    {
        MS.UpdateManga(M, user);
        Console.WriteLine("Finished updating {0}", M.Name);
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
        AvgCalc();
        StateHasChanged();
    }
    private string AvgCalc() => MS.AvgCalc();
    private void RefreshAvgCalc()
    {
        string result = MS.AvgCalc();
        Console.WriteLine("New avg = {0}", result);
        StateHasChanged();
    }
    private void SortByName()
    {
        var qc = MS.GetCollection(user).AsQueryable();
        var q = qc.OrderBy(x => x.Name);
        mangaL = q.ToList();
        StateHasChanged();
    }
    private void SortByAuthor()
    {
        var qc = MS.GetCollection(user).AsQueryable();
        var q = qc.OrderBy(x => x.Author);
        mangaL = q.ToList();
        StateHasChanged();
    }
    private void SortByNumVolumes()
    {
        var qc = MS.GetCollection(user).AsQueryable();
        var q = qc.ToList().OrderBy(x => Int32.Parse(x.numVolumes));
        mangaL = q.ToList();
        StateHasChanged();
    }
    private void SortByNumRead()
    {
        var qc = MS.GetCollection(user).AsQueryable();
        var q = qc.ToList().OrderBy(x => Int32.Parse(x.numRead));
        mangaL = q.ToList();
        StateHasChanged();
    }
}
