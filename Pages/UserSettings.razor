@page "/UserSettings"
@using Discord.WebSocket
@using log4net;

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager uriHelper;
@inject ISnackbar Snackbar;
@inject IMangaService MS;
@inject IDiscordConfigReader DR;

<PageTitle>User Settings</PageTitle>

<p><strong>Update your discord username with your completion percent!</strong></p>

<body>
    @if(!isLoading){
        <EditForm Model="@userModel" OnValidSubmit="() => ConnectToDiscord()">
            <InputText placeholder="Discord Server ID" id="GuildID" @bind-Value="userModel.GuildID" class="form-control form-control-sm" />
            <InputText placeholder="Discord User ID" id="Discord User ID" @bind-Value="userModel.DiscordID" class="form-control form-control-sm" />
            <input type="submit" class="btn btn-primary" value="Update Discord Nickname" />
        </EditForm>
    }
    @if(isLoading){
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
</body>

@code
{
    private Manga M { get; set; } = new Manga();
    private UserModel userModel { get; set; } = new UserModel();
    private List<Manga> mangaList;
    private string avg;
    private ILog log = LogManager.GetLogger(typeof(Program));
    private DiscordSocketClient _client;
    private ulong guildID;
    private ulong DiscordUserID;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userModel.UserName = authState.User.Identity.Name;
        mangaList = MS.GetManga(userModel.UserName);
        avg = MS.AvgCalc(mangaList);
        base.OnInitialized();
        var timer = new System.Threading.Timer((_) =>
        {
            InvokeAsync(async () =>
            {
                StateHasChanged();
            });
        }, null, 0, 1000);
    }

    private async Task ConnectToDiscord()
    {
        try
        {
            isLoading = true;
            _client = new DiscordSocketClient();
            _client.Ready += Client_Ready;
            guildID = ulong.Parse(userModel.GuildID);
            DiscordUserID = ulong.Parse(userModel.DiscordID);
            var token = DR.getToken();
            await _client.LoginAsync(Discord.TokenType.Bot, token);
            await _client.StartAsync();
            await Task.Delay(-1);
        }
        catch(Exception e)
        {
            Console.WriteLine(e);
        }
    }
    public async Task Client_Ready()
    {
        try
        {
            var guild = await _client.Rest.GetGuildAsync(guildID);
            var user = await guild.GetUserAsync(DiscordUserID);
            var oldName = user.Nickname;
            oldName = oldName.Split('(')[0];
            oldName = oldName.Trim();
            log.Info("Old Discord name ="+oldName);
            string newPercent = MS.AvgCalc();
            var newName = (oldName + " (" + avg + "%)");
            if (newName.Length > 32)
            {
                newName = newName.Substring(0, 32);
            }
            log.Info("New Discord name = "+newName);
            await user.ModifyAsync(p => p.Nickname = newName);
            log.Info("Discord nickname updated");
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add("Discord Nickname Updated Successfully!", Severity.Normal);
            isLoading = false;
        }
        catch(Exception e)
        {
            Console.WriteLine(e);
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add("Discord Nickname Failed To Update :(", Severity.Error);
            isLoading = false;
        }
    }
}